{"version":3,"sources":["utils.js","services/httpService.js","App.js","reportWebVitals.js","index.js"],"names":["TIME_INTERVAL","getApiUrl","period","precision","getStocksData","url","Promise","resolve","reject","fetch","then","response","json","result","catch","error","App","useState","data","setData","setStockData","a","useEffect","Chart","options","highcharts","constructorType","categories","chart","backgroundColor","title","text","align","x","subtitle","series","name","cursor","legend","enabled","xAxis","crosshair","width","yAxis","getChartOptions","map","i","Date","Close","className","onClick","Highcharts","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAAaA,EACD,SADCA,EAEA,UAFAA,EAGH,QAIGC,EAAY,SAACC,EAAQC,GAC9B,MAAM,wJAAN,OAA+JD,EAA/J,sBAAmLC,EAAnL,sLCNSC,EAAgB,SAACD,GAA2B,IAAhBD,EAAe,uDAAN,EACxCG,EAAMJ,EAAUC,EAAQC,GAC9B,OAAO,IAAIG,SAAQ,SAACC,EAASC,GACzBC,MAAMJ,GACDK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIN,EAAQM,MACvBC,OAAM,SAAAC,GAAK,OAAIP,EAAOO,U,eCiCpBC,EAlCH,WAER,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAY,uCAAG,WAAOjB,EAAWD,GAAlB,SAAAmB,EAAA,kEACjBF,EADiB,SACHf,EAAcD,EAAWD,GADtB,6EAAH,wDAIlBoB,qBAAW,WACPF,EAAapB,EAAuB,KACrC,IAEH,IAAMuB,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,WAAZ,OAA6B,cAAC,IAAD,CACvCA,WAAYA,EACZC,gBAAiB,QACjBF,QAASA,KAKPA,EFhBqB,SAACG,EAAYT,GACxC,MAAO,CACHU,MAAO,CACHC,gBAAiB,WAErBC,MAAO,CACHC,KAAM,YACNC,MAAO,OACPC,EAAG,IAEPC,SAAU,CACNH,KAAM,qBACNC,MAAO,OACPC,EAAG,IAEPE,OAAQ,CAAC,CAAEjB,OAAMkB,KAAM,QAASC,OAAQ,cACxCC,OAAQ,CACJC,SAAS,GAEbC,MAAO,CACHC,UAAW,CACPC,MAAM,GAEVf,aACAG,MAAO,CACHC,KAAM,kBAGdY,MAAO,CACHF,UAAW,CACPC,MAAO,GAEXZ,MAAO,CACHC,KAAM,gBEjBFa,CAFG1B,EAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QACpB7B,EAAK2B,KAAI,SAAAC,GAAC,OAAIA,EAAEE,UAG/B,OACI,gCACI,wBAAQC,UAAU,UAAUC,QAAS,kBAAM9B,EAAapB,IAAxD,sBACA,wBAAQiD,UAAU,UAAUC,QAAS,kBAAM9B,EAAapB,EAAuB,IAA/E,uBACA,wBAAQiD,UAAU,UAAUC,QAAS,kBAAM9B,EAAapB,IAAxD,oBACA,wBAAQiD,UAAU,UAAUC,QAAS,kBAAM9B,EAAapB,EAAoB,MAA5E,oBACA,cAACuB,EAAD,CAAOC,QAASA,EAASC,WAAY0B,UCvBlCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8bdf2f51.chunk.js","sourcesContent":["export const TIME_INTERVAL = {\n    MINUTE: 'Minute',\n    MINUTES: 'Minutes', // 5 minutes\n    HOUR: 'Hours',\n    WEEK: ''\n}\n\nexport const getApiUrl = (period, precision) => {\n    return `https://www.fxempire.com/api/v1/en/stocks/chart/candles?Identifier=AAPL.XNAS&IdentifierType=Symbol&AdjustmentMethod=All&IncludeExtended=False&period=${period}&Precision=${precision}&StartTime=8/28/2020%2016:0&EndTime=9/4/2020%2023:59&_fields=ChartBars.StartDate,ChartBars.High,ChartBars.Low,ChartBars.StartTime,ChartBars.Open,ChartBars.Close,ChartBars.Volume`\n}\n\nexport const getChartOptions = (categories, data) => {\n    return {\n        chart: {\n            backgroundColor: '#FCFFC5',\n        },\n        title: {\n            text: 'Apple Inc',\n            align: 'left',\n            x: 70\n        },\n        subtitle: {\n            text: 'AAPL (Nasdaq - US)',\n            align: 'left',\n            x: 50\n        },\n        series: [{ data, name: 'CLose', cursor: 'crosshair' }],\n        legend: {\n            enabled: false,\n        },\n        xAxis: {\n            crosshair: {\n                width:3\n            },\n            categories,\n            title: {\n                text: 'Date and Time'\n            }\n        },\n        yAxis: {\n            crosshair: {\n                width: 2\n            },\n            title: {\n                text: 'Close at $'\n            }\n        }\n    }\n}\n","import { getApiUrl } from \"../utils\";\n\nexport const getStocksData = (precision, period = 1) => {\n    const url = getApiUrl(period, precision);\n    return new Promise((resolve, reject) => {\n        fetch(url)\n            .then(response => response.json())\n            .then(result => resolve(result))\n            .catch(error => reject(error));\n    })\n}\n","import React, {useState, useEffect} from 'react';\nimport Highcharts from 'highcharts/highstock'\nimport HighchartsReact from 'highcharts-react-official'\nimport { getStocksData } from \"./services/httpService\";\nimport { TIME_INTERVAL, getChartOptions } from \"./utils\";\nimport './style.css'\n\nconst App = () => {\n\n    const [data, setData] = useState([])\n\n    const setStockData = async (precision, period) => {\n        setData(await getStocksData(precision, period))\n    }\n\n    useEffect( () => {\n        setStockData(TIME_INTERVAL.MINUTES, 5);\n    }, [])\n\n    const Chart = ({ options, highcharts }) => <HighchartsReact\n        highcharts={highcharts}\n        constructorType={'chart'}\n        options={options}\n    />\n\n    const categories = data.map(i => i.Date)\n    const values = data.map(i => i.Close)\n    const options = getChartOptions(categories, values)\n\n    return (\n        <div>\n            <button className=\"primary\" onClick={() => setStockData(TIME_INTERVAL.MINUTE)}>1 Minute</button>\n            <button className=\"primary\" onClick={() => setStockData(TIME_INTERVAL.MINUTES, 5)}>5 Minutes</button>\n            <button className=\"primary\" onClick={() => setStockData(TIME_INTERVAL.HOUR)}>1 Hour</button>\n            <button className=\"primary\" onClick={() => setStockData(TIME_INTERVAL.HOUR, 168)}>1 week</button>\n            <Chart options={options} highcharts={Highcharts} />\n        </div>\n    )\n\n};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}